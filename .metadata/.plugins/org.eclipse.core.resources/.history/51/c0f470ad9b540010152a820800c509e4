package ch.chnoch.thesis.renderer.util;

import java.util.List;

import javax.vecmath.Matrix4f;

import ch.chnoch.thesis.renderer.Shape;
import ch.chnoch.thesis.renderer.VertexBuffers;

public class Util {

	/**
	 * Creates a primitive type float array from a List of reference Float type
	 * values
	 * 
	 * @param list
	 *            The List with the Float values
	 * @return a float array
	 */
	public static float[] floatListToArray(List<Float> list) {
		float[] floatArray = new float[list.size()];
		for (int i = 0; i < list.size(); i++) {
			floatArray[i] = list.get(i);
		}

		return floatArray;
	}
	
	/**
	 * Creates a primitive type float array from a List of reference Float type
	 * values
	 * 
	 * @param list
	 *            The List with the Float values
	 * @return a float array
	 */
	public static int[] intListToArray(List<Integer> list) {
		int[] floatArray = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			floatArray[i] = list.get(i);
		}

		return floatArray;
	}
	
	/**
	 * Creates a new Identity Matrix.
	 * @return an identity Matrix.
	 */
	public static Matrix4f getIdentityMatrix() {
		return new Matrix4f(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	}
	
	public static Shape loadCube(float scale) {
		// Construct a data structure that stores the vertices, their
        // attributes, and the triangle mesh connectivity
//        VertexData vertexData = new VertexData(vertices.length / 3);
//        vertexData.addElement(vertices, VertexData.Semantic.POSITION, 3);
//        vertexData.addElement(colors, VertexData.Semantic.COLOR, 3);

//        vertexData.addIndices(indices);
        
        VertexBuffers vertexBuffer = new VertexBuffers();
        vertexBuffer.setColorBuffer(colors);
        vertexBuffer.setIndexBuffer(indices);
        
        for (int i=0;i<vertices.length;i++) {
        	vertices[i] *= scale;
        }
        
        vertexBuffer.setVertexBuffer(vertices);

        // Make a shape and add the object
        return new Shape(vertexBuffer);
	}
	
	
	
	
	static int one = 0x10000;
	static float vertices[] = {
			-one, -one, -one,
			one, -one, -one,
			one,  one, -one,
			-one,  one, -one,
			-one, -one,  one,
			one, -one,  one,
			one,  one,  one,
			-one,  one,  one,
	};
	
	static int colors[] = {
			0,    0,    0,  one,
			one,    0,    0,  one,
			one,  one,    0,  one,
			0,  one,    0,  one,
			0,    0,  one,  one,
			one,    0,  one,  one,
			one,  one,  one,  one,
			0,  one,  one,  one,
	};
	
	static short indices[] = {
			0, 4, 5,    0, 5, 1,
			1, 5, 6,    1, 6, 2,
			2, 6, 7,    2, 7, 3,
			3, 7, 4,    3, 4, 0,
			4, 7, 6,    4, 6, 5,
			3, 0, 1,    3, 1, 2
	};
}
